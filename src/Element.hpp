#pragma once

#include<array>
#include<string>

#ifdef __APPLE__
#include<GLUT/glut.h>
#else
#include<GL/gl.h>
#endif

namespace chem {
    extern const std::array<std::array<GLfloat, 3>, 109> COLOR_ARRAY = {{
        {0.950000000, 0.950000000, 0.950000000},  // 1
        {0.850980392, 1.000000000, 1.000000000},  // 2
        {0.800000000, 0.501960784, 1.000000000},  // 3
        {0.760784314, 1.000000000, 0.000000000},  // 4
        {1.000000000, 0.709803922, 0.709803922},  // 5
        {0.400000000, 0.400000000, 0.400000000},  // 6, C
        {0.200000000, 0.200000000, 1.000000000},  // 7
        {1.000000000, 0.300000000, 0.300000000},  // 8
        {0.701960784, 1.000000000, 1.000000000},  // 9
        {0.701960784, 0.890196078, 0.960784314},  // 10
        {0.670588235, 0.360784314, 0.949019608},  // 11
        {0.541176471, 1.000000000, 0.000000000},  // 12
        {0.749019608, 0.650980392, 0.650980392},  // 13
        {0.941176471, 0.784313725, 0.627450980},  // 14
        {1.000000000, 0.501960784, 0.000000000},  // 15
        {0.900000000, 0.775000000, 0.250000000},  // 16
        {0.121568627, 0.941176471, 0.121568627},  // 17
        {0.501960784, 0.819607843, 0.890196078},  // 18
        {0.560784314, 0.250980392, 0.831372549},  // 19
        {0.239215686, 1.000000000, 0.000000000},  // 20
        {0.901960784, 0.901960784, 0.901960784},  // 21
        {0.749019608, 0.760784314, 0.780392157},  // 22
        {0.650980392, 0.650980392, 0.670588235},  // 23
        {0.541176471, 0.600000000, 0.780392157},  // 24
        {0.611764706, 0.478431373, 0.780392157},  // 25
        {0.878431373, 0.400000000, 0.200000000},  // 26
        {0.941176471, 0.564705882, 0.627450980},  // 27
        {0.313725490, 0.815686275, 0.313725490},  // 28
        {0.784313725, 0.501960784, 0.200000000},  // 29
        {0.490196078, 0.501960784, 0.690196078},  // 30
        {0.760784314, 0.560784314, 0.560784314},  // 31
        {0.400000000, 0.560784314, 0.560784314},  // 32
        {0.741176471, 0.501960784, 0.890196078},  // 33
        {1.000000000, 0.631372549, 0.000000000},  // 34
        {0.650980392, 0.160784314, 0.160784314},  // 35
        {0.360784314, 0.721568627, 0.819607843},  // 36
        {0.439215686, 0.180392157, 0.690196078},  // 37
        {0.000000000, 1.000000000, 0.000000000},  // 38
        {0.580392157, 1.000000000, 1.000000000},  // 39
        {0.580392157, 0.878431373, 0.878431373},  // 40
        {0.450980392, 0.760784314, 0.788235294},  // 41
        {0.329411765, 0.709803922, 0.709803922},  // 42
        {0.231372549, 0.619607843, 0.619607843},  // 43
        {0.141176471, 0.560784314, 0.560784314},  // 44
        {0.039215686, 0.490196078, 0.549019608},  // 45
        {0.000000000, 0.411764706, 0.521568627},  // 46
        {0.752941176, 0.752941176, 0.752941176},  // 47
        {1.000000000, 0.850980392, 0.560784314},  // 48
        {0.650980392, 0.458823529, 0.450980392},  // 49
        {0.400000000, 0.501960784, 0.501960784},  // 50
        {0.619607843, 0.388235294, 0.709803922},  // 51
        {0.831372549, 0.478431373, 0.000000000},  // 52
        {0.580392157, 0.000000000, 0.580392157},  // 53
        {0.258823529, 0.619607843, 0.690196078},  // 54
        {0.341176471, 0.090196078, 0.560784314},  // 55
        {0.000000000, 0.788235294, 0.000000000},  // 56
        {0.439215686, 0.831372549, 1.000000000},  // 57
        {1.000000000, 1.000000000, 0.780392157},  // 58
        {0.850980392, 1.000000000, 0.780392157},  // 59
        {0.780392157, 1.000000000, 0.780392157},  // 60
        {0.639215686, 1.000000000, 0.780392157},  // 61
        {0.560784314, 1.000000000, 0.780392157},  // 62
        {0.380392157, 1.000000000, 0.780392157},  // 63
        {0.270588235, 1.000000000, 0.780392157},  // 64
        {0.188235294, 1.000000000, 0.780392157},  // 65
        {0.121568627, 1.000000000, 0.780392157},  // 66
        {0.000000000, 1.000000000, 0.611764706},  // 67
        {0.000000000, 0.901960784, 0.458823529},  // 68
        {0.000000000, 0.831372549, 0.321568627},  // 69
        {0.000000000, 0.749019608, 0.219607843},  // 70
        {0.000000000, 0.670588235, 0.141176471},  // 71
        {0.301960784, 0.760784314, 1.000000000},  // 72
        {0.301960784, 0.650980392, 1.000000000},  // 73
        {0.129411765, 0.580392157, 0.839215686},  // 74
        {0.149019608, 0.490196078, 0.670588235},  // 75
        {0.149019608, 0.400000000, 0.588235294},  // 76
        {0.090196078, 0.329411765, 0.529411765},  // 77
        {0.815686275, 0.815686275, 0.878431373},  // 78
        {1.000000000, 0.819607843, 0.137254902},  // 79
        {0.721568627, 0.721568627, 0.815686275},  // 80
        {0.650980392, 0.329411765, 0.301960784},  // 81
        {0.341176471, 0.349019608, 0.380392157},  // 82
        {0.619607843, 0.309803922, 0.709803922},  // 83
        {0.670588235, 0.360784314, 0.000000000},  // 84
        {0.458823529, 0.309803922, 0.270588235},  // 85
        {0.258823529, 0.509803922, 0.588235294},  // 86
        {0.258823529, 0.000000000, 0.400000000},  // 87
        {0.000000000, 0.490196078, 0.000000000},  // 88
        {0.439215686, 0.670588235, 0.980392157},  // 89
        {0.000000000, 0.729411765, 1.000000000},  // 90
        {0.000000000, 0.631372549, 1.000000000},  // 91
        {0.000000000, 0.560784314, 1.000000000},  // 92
        {0.000000000, 0.501960784, 1.000000000},  // 93
        {0.000000000, 0.419607843, 1.000000000},  // 94
        {0.329411765, 0.360784314, 0.949019608},  // 95
        {0.470588235, 0.360784314, 0.890196078},  // 96
        {0.541176471, 0.309803922, 0.890196078},  // 97
        {0.631372549, 0.211764706, 0.831372549},  // 98
        {0.701960784, 0.121568627, 0.831372549},  // 99
        {0.701960784, 0.121568627, 0.729411765},  // 100
        {0.701960784, 0.050980392, 0.650980392},  // 101
        {0.741176471, 0.050980392, 0.529411765},  // 102
        {0.780392157, 0.000000000, 0.400000000},  // 103
        {0.800000000, 0.000000000, 0.349019608},  // 104
        {0.819607843, 0.000000000, 0.309803922},  // 105
        {0.850980392, 0.000000000, 0.270588235},  // 106
        {0.878431373, 0.000000000, 0.219607843},  // 107
        {0.901960784, 0.000000000, 0.180392157},  // 108
        {0.921568627, 0.000000000, 0.149019608}   // 109
    }};

    extern const std::array<std::string, 109> NAME_ARRAY = {
        "H", "He", "Li", "Be", "B", "C", "N", "O", "F", "Ne",
        "Na", "Mg", "Al", "Si", "P", "S", "Cl", "Ar", "K", "Ca",
        "Sc", "Ti", "V", "Cr", "Mn", "Fe", "Co", "Ni", "Cu", "Zn",
        "Ga", "Ge", "As", "Se", "Br", "Kr", "Rb", "Sr", "Y", "Zr",
        "Nb", "Mo", "Tc", "Ru", "Rh", "Pd", "Ag", "Cd", "In", "Sn",
        "Sb", "Te", "I", "Xe", "Cs", "Ba", "La", "Ce", "Pr", "Nd",
        "Pm", "Sm", "Eu", "Gd", "Tb", "Dy", "Ho", "Er", "Tm", "Yb",
        "Lu", "Hf", "Ta", "W", "Re", "Os", "Ir", "Pt", "Au", "Hg",
        "Tl", "Pb", "Bi", "Po", "At", "Rn", "Fr", "Ra", "Ac", "Th",
        "Pa", "U", "Np", "Pu", "Am", "Cm", "Bk", "Cf", "Es", "Fm",
        "Md", "No", "Lr", "Rf", "Db", "Sg", "Bh", "Hs", "Mt"  // "Ds", "Rg", "Cn", "Uut", "Fl", "Uup", "Lv", "Uus", "Uuo",
    };

    int getId(const std::string& element_name) {
        for (int i = 0; i < NAME_ARRAY.size(); i++) {
            if (NAME_ARRAY[i] == element_name) {
                return i;
            }
        }
        return -1;
    }

    extern const std::array<double, 109> VDWR_ARRAY = {{
    1.200000000, 1.430000000, 2.120000000, 1.980000000, 1.910000000, 1.770000000, 1.660000000, 1.500000000, 1.460000000, 1.580000000, 
    2.500000000, 2.510000000, 2.250000000, 2.190000000, 1.900000000, 1.890000000, 1.820000000, 1.830000000, 2.730000000, 2.620000000, 
    2.580000000, 2.460000000, 2.420000000, 2.450000000, 2.450000000, 2.440000000, 2.400000000, 2.400000000, 2.380000000, 2.390000000,
    2.320000000, 2.290000000, 1.880000000, 1.820000000, 1.860000000, 2.250000000, 3.210000000, 2.840000000, 2.750000000, 2.520000000,
    2.560000000, 2.450000000, 2.440000000, 2.460000000, 2.440000000, 2.150000000, 2.530000000, 2.490000000, 2.430000000, 2.420000000,
    2.470000000, 1.990000000, 2.040000000, 2.060000000, 3.480000000, 3.030000000, 2.980000000, 2.880000000, 2.920000000, 2.950000000,
    2.900000000, 2.900000000, 2.870000000, 2.830000000, 2.790000000, 2.870000000, 2.810000000, 2.830000000, 2.790000000, 2.800000000,
    2.740000000, 2.630000000, 2.530000000, 2.570000000, 2.490000000, 2.480000000, 2.410000000, 2.290000000, 2.320000000, 2.450000000,
    2.470000000, 2.600000000, 2.540000000, 2.930000000, 2.880000000, 2.710000000, 2.820000000, 2.810000000, 2.800000000, 2.930000000,
    2.880000000, 2.710000000, 2.820000000, 2.810000000, 2.830000000, 3.050000000, 3.400000000, 3.050000000, 2.700000000, 0.000000000,
    0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 
    }};

    double getExpectedBondLengh(const int& element_id_1, const int& element_id_2){
        return (VDWR_ARRAY[element_id_1] + VDWR_ARRAY[element_id_2]) * 0.6;
    }
}